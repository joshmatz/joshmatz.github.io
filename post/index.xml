<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Josh Matz</title>
    <link>/post/</link>
    <description>Recent content in Posts on Josh Matz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Apr 2016 12:21:39 -0500</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>take note</title>
      <link>/post/take-note/</link>
      <pubDate>Fri, 22 Apr 2016 12:21:39 -0500</pubDate>
      
      <guid>/post/take-note/</guid>
      <description>&lt;p&gt;I’ve always wanted to write but I often have problems selecting a topic and being comfortable publishing my opinion on it. You know the drill: write some thoughts, delete, write the same thoughts expressed differently, delete, write again, delete the article.&lt;/p&gt;

&lt;p&gt;I find that part of this cycle is caused by me choosing topics that are too broad or lack focus. Some of it can also be attributed to the topics I’d like to discuss but am too nervous to publish my thoughts.&lt;/p&gt;

&lt;p&gt;To combat that, I’m going to be taking notes. I may or may not write about the topics in my notes, but I’ll be darned if I won’t be able to look back and have them ready to go when I want to write and publish them. So here’s what I’ll be noting for myself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;things I like&lt;/li&gt;
&lt;li&gt;things that frustrate me&lt;/li&gt;
&lt;li&gt;ideas I have&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To start, I took note on this very topic. Many will likely be very small and that’s OK. The idea is to just get into the habit of regularly publishing thoughts to grow my comfort in doing so.&lt;/p&gt;

&lt;p&gt;We’ll see if it works. Do you have a ritual that helps you? Let me know, I’d love to know.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Your Stock Options Aren’t Worth Anything</title>
      <link>/post/your-stock-options-are-not-worth-anything/</link>
      <pubDate>Wed, 06 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/your-stock-options-are-not-worth-anything/</guid>
      <description>

&lt;p&gt;So you took a job at a start up and are excited by the Options the company gave you. The company tells you they’re worth $50,000 now, but in a just few short years you’ll have a million dollars in Options and be ready to drive that red Ferrari. Everyone’s going to make bank.&lt;/p&gt;

&lt;p&gt;Too bad they neglected to mention a few things, in particular that these Stock Options are often referred to as golden handcuffs.&lt;/p&gt;

&lt;h2 id=&#34;so-what-are-stock-options:0dd500338a2ce52ecf559be29d4bd03e&#34;&gt;So… what are Stock Options?&lt;/h2&gt;

&lt;p&gt;Stock Options are just that, optional. You decide if you want to Exercise them or not. This is good and bad but at the end of the day it’s flexibility for you to decide what’s best. When you Exercise your Options, you’re paying the company money to convert your Options to actual Shares. They’re still not worth anything yet, but they could be. Someday.&lt;/p&gt;

&lt;p&gt;How do you determine how much it costs to Exercise your Options? The company gave you a Strike Price that tells you what each individual Option is currently worth. For example, a company may grant you 100,000 Options at a value of $0.50 each. To Exercise the full 100,000 Options, you’d have to pay $50,000. The Strike Price is often set around once a year or when your company has a new valuation for each new set of Option grants, but never changes from your original grant.&lt;/p&gt;

&lt;p&gt;But there’s a catch: You can’t just Exercise your Options immediately. When you were hired, the company likely set these Options to Vest on a schedule. When Options Vest it means they’ve finally become available to you to purchase. The schedule at which Options Vest can vary, but often it’s something like “4 years, 1 year cliff”. This means that your stock Vests 100% over 4 years but doesn’t start until that one year “cliff”. So if you leave your company in 11 months, you’ll receive zero Options. It looks like the below graph, note the cliff starts at the 1 year mark.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/your-stock-options-arent-worth-anything/stock-vesting-schedule.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;http://www.jordanvc.com/blog/2014/6/18/why-term-sheet-needs-vesting-schedule&#34;&gt;Via jordan vc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once your Options have Vested and you’ve Exercised your options at their set Strike Price, you now have Shares. But you’re not rich yet.&lt;/p&gt;

&lt;h1 id=&#34;getting-rich-with-stock-options:0dd500338a2ce52ecf559be29d4bd03e&#34;&gt;Getting rich with Stock Options&lt;/h1&gt;

&lt;p&gt;Hopefully that wasn’t all terribly excruciating to learn about. To put that knowledge to work, here’s some scenarios that can play out with your Stock Options.&lt;/p&gt;

&lt;h2 id=&#34;scenario-a:0dd500338a2ce52ecf559be29d4bd03e&#34;&gt;Scenario A&lt;/h2&gt;

&lt;p&gt;Let’s say Abigail was hired and the company granted her 100,000 Options with a Strike Price of $0.50. Abigail works diligently for the company for 11 months but finds out her mother is ill and she has to move back home away from the company and so she must leave the company. Even though Abigail was a hard worker, she didn’t fulfill her 1 year Cliff requirement and zero of her Options became available to her. Sorry, Abigail.&lt;/p&gt;

&lt;h2 id=&#34;scenario-b:0dd500338a2ce52ecf559be29d4bd03e&#34;&gt;Scenario B&lt;/h2&gt;

&lt;p&gt;Bob gets hired at a different company and gets the same deal — 100,000 Options at a Strike Price of $0.50. He works for his company for 12 months but the company isn’t treating him right and he’s had enough of their shenanigans. He decides to leave the company. Because he made it the full 12 months of his 1 Year Cliff, his Options Vested and he gained 25% of them (25,000).&lt;/p&gt;

&lt;p&gt;But there’s a catch!&lt;/p&gt;

&lt;p&gt;The company’s agreement with its employees tell them that as soon as they leave, they have 3 months to Exercise their Vested Options otherwise they forfeit them back to the company.&lt;/p&gt;

&lt;p&gt;Some companies like Clef are working to extend the period that allows you to Exercise your options, but Bob’s company wasn’t Clef. Bob forgets about this requirement and he loses all of his Options.&lt;/p&gt;

&lt;h2 id=&#34;scenario-c:0dd500338a2ce52ecf559be29d4bd03e&#34;&gt;Scenario C&lt;/h2&gt;

&lt;p&gt;Claire gets hired at a company and predictably receives 100,000 Options at a Strike Price of $0.50. She waits 12 months for her 1 Year Cliff and now has 25,000 Vested Options. She’s extremely confident the company will be successful and wants to Exercise her Options immediately. After all, the company’s most recent valuation says it’s now worth $10 per share! She pays the company $12,500 ($0.50 x 25,000) and receives her Shares paperwork. She just made a pretty penny with her Shares now being valued at $250,000.&lt;/p&gt;

&lt;p&gt;Claire didn’t realize the IRS has a tax called the Alternative Minimum Tax. The AMT says that when you Exercise your Options, you realized a profit between your Strike Price and the current valuation. For Claire, the IRS says she now owes tax on her “profit”, $237,500.&lt;/p&gt;

&lt;p&gt;Unfortunately for Claire, her instincts about the company were wrong and the stock crashes. The IRS doesn’t care and Claire still owes the IRS approximately $70,000. At least she convinced them to set up a payment plan.&lt;/p&gt;

&lt;h2 id=&#34;scenario-d:0dd500338a2ce52ecf559be29d4bd03e&#34;&gt;Scenario D&lt;/h2&gt;

&lt;p&gt;Stop me if you’ve heard this before. Danny gets hired at a company and receives 100,000 Options at a Strike Price of $0.50. He loves the company and has been around for 4 years, enough to have Vested all of his Options. He’s heard that the most recent company valuation is $15 per share. This means his current Options are valued at $1,500,000. He’s rich! If the company goes public at $30 per Share, he’ll be a multimillionaire!&lt;/p&gt;

&lt;p&gt;Danny knows the IRS has an AMT which means he’d have to pay $450,000 to Exercise his 100,000 Options. He can’t afford that. So he waits. Danny was also a very early employee and he knows the average company VC-backed company IPOs after at least 8 years. So he waits longer.&lt;/p&gt;

&lt;p&gt;About 5 years into the company’s life, there’s a scandal in the company that drives out Danny’s manager and the new manager is a real jerk, forcing Danny into bad situations and requiring overtime every week. Company culture is deteriorating and Danny hates everything about it. But he remembers if he just waits, he’ll be rich.&lt;/p&gt;

&lt;p&gt;So Danny waits. Stressing about his job, performing poorly, feeling those golden handcuffs.&lt;/p&gt;

&lt;p&gt;Danny’s poor performance catches up to him around the 6.5 year mark and Danny’s fired.&lt;/p&gt;

&lt;p&gt;Danny can’t afford his AMT and isn’t able to secure a loan to pay it. He didn’t work there 6.5 years to see those Options go to waste. Danny gambles and Exercises his options anyway. The IRS sets up a payment plan with him and Danny waits to see if his Stock will be worth anything.&lt;/p&gt;

&lt;h1 id=&#34;your-stock-options-won-t-make-you-rich:0dd500338a2ce52ecf559be29d4bd03e&#34;&gt;Your Stock Options won’t make you rich&lt;/h1&gt;

&lt;p&gt;While it’s fun to dream about Stock Options, there’s unfortunately very few scenarios that work out in your favor. The above scenarios are just a few of how things could go badly. There’s additional complexities like warrants and common/preferred stock levels and more acronyms like ISO, NSO and RSU.&lt;/p&gt;

&lt;p&gt;Things can go wrong at any point and it’s good to take the value of your Options with a large grain of salt. Enjoy them, just plan for the worse.&lt;/p&gt;

&lt;h2 id=&#34;bonus-learn-more:0dd500338a2ce52ecf559be29d4bd03e&#34;&gt;Bonus: Learn More&lt;/h2&gt;

&lt;p&gt;There’s a lot written on this subject but it’s often hard to find the answers to your questions (or even know what questions to ask). There’s also some companies out there working to increase your options when it comes to your Options. Here’s some links that might help:&lt;/p&gt;

&lt;p&gt;Clef Equity Handbook (Interesting: Extends the 90 day Exercise window to 7 years.)&lt;/p&gt;

&lt;p&gt;The Open Guide to Equity Compensation&lt;/p&gt;

&lt;p&gt;When to Exercise Stock Options (Hint: Either very early on or at IPO filing.)&lt;/p&gt;

&lt;p&gt;I am by no means an expert on the subject, but I enjoy learning and talking about it. Have a question or comment? Let me know!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Your content can wait</title>
      <link>/post/your-content-can-wait/</link>
      <pubDate>Mon, 04 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/your-content-can-wait/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Good content doesn’t need to be published immediately.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;About a week ago I re-discovered Buffer, an app that lets users easily schedule their social media content to be published at a later date. I didn’t think much of it until I started using it consistently. A week in and I’m now a paying user. Not only that, it’s made me wonder how we can apply Buffer’s principles to any content.&lt;/p&gt;

&lt;p&gt;Scheduling content isn’t new but for a variety of reasons I’ve not found it easy to exhibit patience over my writing. Inspiration would hit then I’d write and publish; I’d finish reading an article then summarize and share. That impatience lead to irregular and odd times for my content to be published. It didn’t just equate to missed eyeballs and low engagement, it also meant I didn’t have a schedule to keep me on track and accountable to my goals.&lt;/p&gt;

&lt;p&gt;We live in a world of instants. Instant video. Instant messaging. Instant oatmeal. It’s tough to take a step back and not publish your content instantly. When I started using Buffer it disconnected me from that instant publication. I realized it’s not the timeliness of your content that matters if you aren’t publishing any at all. And if your content is good then it can wait.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: I wrote this 3 years ago. I no longer pay for Buffer as I’m not sharing as much content as I used to, but I still love and use it.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Structure for your large Angular or JavaScript app</title>
      <link>/post/structure-large-angular-or-javascript-app/</link>
      <pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/structure-large-angular-or-javascript-app/</guid>
      <description>

&lt;p&gt;JavaScript frameworks don’t generally come with many opinons on how you organize your applications. You could be using a single file or many, a single module or a multitude, organized in whichever way you think is best. And when it comes to organizing a large applications, a number of developers (including us) are left scratching their heads wondering if they’re doing it right or even just how to get started. So when we started building our AngularJS application, we researched and found a few popular ways to organize your front-end code and decided on one we liked best.&lt;/p&gt;

&lt;p&gt;Let’s consider a hypothetical app that allows users to maintain a garden and see how we might organize it.&lt;/p&gt;

&lt;h2 id=&#34;functionality-based-directory-structure:9a145be4411ecfefcd53c9b0061e62d7&#34;&gt;Functionality-based directory structure&lt;/h2&gt;

&lt;p&gt;This is perhaps the most popular way of organizing an Angular project, but not necessarily the best. The structure relies on folders of files with similar functionality. As an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/scripts
  app.js
  /config
    global-config.js
    account-config.js
    artichoke-config.js
    cucumbers-config.js
    garden-config.js
  /constants
    global-constants.js
  /controllers
    account-controller.js
    artichokes-controller.js
    garden-controller.js
    cucumbers-service.js
    navigation-controller.js
  /services
    account-service.js
    artichokes-service.js
    cucumbers-service.js
    garden-service.js
  /directives
    active-route-directive.js
    garden-drag-drop-directive.js
    artichokes-directive.js
    cucumbers-directive.js
  /templates
    account-template.html
    artichokes-item-template.html
    artichokes-list-template.html
    cucumbers-item-template.html
    cucumbers-list-template.html
    navigation-template.html
    garden-item-template.html
  /values
    global-providers.js
/tests
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usually this structure works out great for small applications. Unfortunately, it starts to breakdown in quite a number of ways when scaling to a larger application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Where would you specify modules, their dependencies, configs and run methods?&lt;/li&gt;
&lt;li&gt;Difficult to identify all files related to a feature: &lt;code&gt;active-route-directive.js&lt;/code&gt; + &lt;code&gt;navigation-controller.js&lt;/code&gt; + &lt;code&gt;navigation-template.html&lt;/code&gt; + &lt;code&gt;navigation-config.js&lt;/code&gt; are all necessary to render the navigation properly, but you wouldn’t know it by glancing. Which also means:&lt;/li&gt;
&lt;li&gt;Long-term maintenance woes. If we were to replace our garden with a terrarium, how are we to easily know what’s affected? What if we completely removed it?&lt;/li&gt;
&lt;li&gt;Deciding if Angular vocabulary items are really worth their own folders: values, constants, providers, services, factories, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, there’s a number of issues that will need to be addressed if an application continues on with this structure, which has lead many people to the next organizational option.&lt;/p&gt;

&lt;h2 id=&#34;feature-based-directory-structure:9a145be4411ecfefcd53c9b0061e62d7&#34;&gt;Feature-based directory structure&lt;/h2&gt;

&lt;p&gt;One way developers are addressing the problems with functionality-based organization in Angular applications is by structuring their code based on features instead. The application might look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/scripts
  app.js
  global-config.js
  global-constants.js
  global-providers.js
  /account
    account-config.js
    account-controller.js
    account-service.js
    account-template.html
  /artichokes
    artichokes-config.js
    artichokes-controller.js
    artichokes-item-template.html
    artichokes-service.js
    artichokes-directive.js
  /cucumbers
    cucumbers-config.js
    cucumbers-controller.js
    cucumbers-item-template.html
    cucumbers-service.js
    cucumbers-directive.js
  /garden
    garden-config.js
    garden-controller.js
    garden-item-template.html
    garden-service.js
    garden-drag-drop-directive.js
  /navigation
    active-route-directive.js
    navigation-config.js
    navigation-controller.js
    navigation-template.html
/tests
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this feature-based structure, we can now clearly identify everything that’s being included within our application and easily find necessary files to fix a bug in our cucumbers feature. Or, if we wanted to completely remove our garden feature, we’d be able to do so quickly and efficiently.&lt;/p&gt;

&lt;p&gt;However, we still see room for improvement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Often times some features aren’t intended to be used by others. How can we make that more obvious? On the flipside, how can we make it obvious which components are for reuse?&lt;/li&gt;
&lt;li&gt;How can we incorporate 3rd party libraries?&lt;/li&gt;
&lt;li&gt;What about global configuration files that aren’t necessarily part of any particular feature?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;combination-directory-structure:9a145be4411ecfefcd53c9b0061e62d7&#34;&gt;Combination directory structure&lt;/h2&gt;

&lt;p&gt;In the end we chose to combine the two with what we see as a pretty useful way to structure a large Angular application. It looks a little something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/scripts
  app.js
  app.test.js
  /config
    global-config.js
    global-constants.js
    global-providers.js
  /libs
    ...
  /modules
    /account
      account-config.js
      account-service.js
    /navigation
      active-route-directive.js
      navigation-config.js
      navigation-controller.js
      navigation-template.html
    /artichokes
      artichokes-config.js
      artichokes-controller.js
      artichokes-item-template.html
      artichokes-service.js
      artichokes-directive.js
    /cucumbers
      cucumbers-config.js
      cucumbers-controller.js
      cucumbers-item-template.html
      cucumbers-service.js
      cucumbers-directive.js
    /garden
      garden-config.js
      garden-service.js
      garden-drag-drop-directive.js
  /routes
    /account
      account-controller.js
      account-template.html
    /garden
      garden-controller.js
      garden-item-template.html
    /home
      home-controller.js
      home-template.html
  /templates
    404.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;global-config:9a145be4411ecfefcd53c9b0061e62d7&#34;&gt;Global config&lt;/h2&gt;

&lt;p&gt;As an application expands, it’ll often find its own sets of configuration necessities that span across features. In our own environment, this is where we store things like whether our app runs in html5 mode, what base API URL to use, or predefined lists that may need to be rendered in various places.&lt;/p&gt;

&lt;h2 id=&#34;third-party-module-separation:9a145be4411ecfefcd53c9b0061e62d7&#34;&gt;Third party module separation&lt;/h2&gt;

&lt;p&gt;Sometimes it’s necessary to include third party integrations. Usually you’ll be using bower or npm to track these, but integration may often be required into your framework of choice. You now have a place other developers are able to quickly recognize where third party code is being integrated.&lt;/p&gt;

&lt;h2 id=&#34;elevated-routes-for-quicker-identification:9a145be4411ecfefcd53c9b0061e62d7&#34;&gt;Elevated routes for quicker identification&lt;/h2&gt;

&lt;p&gt;For the time being, web apps are still heavily influenced by the routes that users can access. These accessible pages often come with their own very specific controllers and templates that combine the various modules of an application. In our mixed approach, we’ve recognized their status and elevated them within our code organization. This makes it extremely easy when a bug is reported on /garden for a developer who wasn’t involved in the feature to isolate the files and debug from there.&lt;/p&gt;

&lt;h2 id=&#34;what-do-you-think:9a145be4411ecfefcd53c9b0061e62d7&#34;&gt;What do you think?&lt;/h2&gt;

&lt;p&gt;The examples above are very rudimentary, but with this mixed approach we think we’re getting the best of both the feature and functional worlds.&lt;/p&gt;

&lt;p&gt;What do you think? Curious why I did something? Ask away, I&amp;rsquo;d love to answer.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article originally appeared on &lt;a href=&#34;https://blog.srcclr.com/structure-for-your-large-angular-or-javascript-app/&#34;&gt;SourceClear&amp;rsquo;s blog&lt;/a&gt; and is preserved here for historical reference.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>